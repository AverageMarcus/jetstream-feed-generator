// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getFeed = `-- name: GetFeed :one
select feed_name, latest_cursor
from feeds
where feed_name = $1
`

func (q *Queries) GetFeed(ctx context.Context, feedName string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, feedName)
	var i Feed
	err := row.Scan(&i.FeedName, &i.LatestCursor)
	return i, err
}

const getFeedPosts = `-- name: GetFeedPosts :many
select feed_name, time_us, did, rkey
from feed_posts
where feed_name = $1
  and time_us < $2
order by time_us desc
limit $3
`

type GetFeedPostsParams struct {
	FeedName string
	TimeUs   int64
	Limit    int64
}

func (q *Queries) GetFeedPosts(ctx context.Context, arg GetFeedPostsParams) ([]FeedPost, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPosts, arg.FeedName, arg.TimeUs, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedPost
	for rows.Next() {
		var i FeedPost
		if err := rows.Scan(
			&i.FeedName,
			&i.TimeUs,
			&i.Did,
			&i.Rkey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedCursor = `-- name: UpdateFeedCursor :exec
update feeds
set latest_cursor = $1
where feed_name = $2
`

type UpdateFeedCursorParams struct {
	LatestCursor sql.NullInt64
	FeedName     string
}

func (q *Queries) UpdateFeedCursor(ctx context.Context, arg UpdateFeedCursorParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedCursor, arg.LatestCursor, arg.FeedName)
	return err
}

const upsertFeed = `-- name: UpsertFeed :exec
insert into feeds (feed_name)
values ($1)
on conflict do nothing
`

func (q *Queries) UpsertFeed(ctx context.Context, feedName string) error {
	_, err := q.db.ExecContext(ctx, upsertFeed, feedName)
	return err
}

const upsertFeedPost = `-- name: UpsertFeedPost :exec
insert
into feed_posts (feed_name, time_us, did, rkey)
values ($1, $2, $3, $4)
on conflict (feed_name, did, rkey) do nothing
`

type UpsertFeedPostParams struct {
	FeedName string
	TimeUs   int64
	Did      string
	Rkey     string
}

func (q *Queries) UpsertFeedPost(ctx context.Context, arg UpsertFeedPostParams) error {
	_, err := q.db.ExecContext(ctx, upsertFeedPost,
		arg.FeedName,
		arg.TimeUs,
		arg.Did,
		arg.Rkey,
	)
	return err
}
